<?php
/**
 * Drupal Module: Code Field
 *
 * Developed by Reyero.net
 */

/**
 * Get code field instance.
 *
 * A code field is instantiated only once per entity type, bundle name and field name,
 * then it is statically cached and reused.
 *
 * @param object $info
 *   Field info to get the instance.
 *
 * @return CodeField
 *   Code field instance.
 */
function code_field($info) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['fields'] = &drupal_static(__FUNCTION__);
  }
  $fields = &$drupal_static_fast['fields'];
  if (!isset($fields[$info->entity_type][$info->bundle_name][$info->field_name])) {
    $class = $info->class;
    $fields[$info->entity_type][$info->bundle_name][$info->field_name] = new $class($info);
  }
  return $fields[$info->entity_type][$info->bundle_name][$info->field_name];
}

/**
 * Implements hook_element_info().
 */
function code_field_element_info() {
  /**
   * The 'code_field' element must have one of these values:
   * - '#code_field', instance of a code field object
   * - '#info', code field information.
   */
  $types['code_field'] = array(
    '#entity' => NULL,
    '#info' => NULL,
    '#pre_render' => array('code_field_pre_render_callback'),
  );
  return $types;
}

/**
 * Pre-render callback for code fields.
 */
function code_field_pre_render_callback($elements) {
  if (!isset($elements['#code_field'])) {
    $elements['#code_field'] = code_field($elements['#info']);
  }
  return $elements['#code_field']->pre_render($elements);
}

/**
 * Implements hook_field_extra_fields()
 */
function code_field_field_extra_fields() {
  $fields = array();
  foreach (CodeFieldInfo::getInfo() as $type => $type_info) {
    foreach ($type_info as $bundle => $bundle_info) {
      foreach ($bundle_info as $name => $info) {
        if ($info->extra) {
          $code = code_field($info);
          $fields[$type][$bundle]['display'][$name] = array(
            'label' => $code->getLabel(),
            'description' => $code->getDescription(),
            'weight' => $code->getWeight(),
          );
        }
      }
    }
  }
  return $fields;
}

/**
 * Implements hook_entity_view().
 */
function code_field_entity_view($entity, $type, $view_mode, $langcode) {
  list($id, $vid, $bundle) = entity_extract_ids($type, $entity);
  if ($bundle) {
    foreach (CodeFieldInfo::getType($type, $bundle) as $name => $info) {
      if ($info->extra) {
        code_field($info)->entity_view($entity, $view_mode, $langcode);
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function code_field_views_api() {
  $path = drupal_get_path('module', 'code_field');
  return array(
    'api' => '3.0',
    'path' => $path . '/views',
  );
}
